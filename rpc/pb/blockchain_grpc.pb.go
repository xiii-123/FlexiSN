// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: blockchain.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockchainClient is the client API for Blockchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainClient interface {
	GetBlockNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockNumberResp, error)
	GetBlockByHash(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error)
	GetBlockByNumber(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error)
	GetTransactionByHash(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error)
	GetTransactionByBlockNumberAndIndex(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error)
	ReadContractAddress(ctx context.Context, in *ReadContractAddressReq, opts ...grpc.CallOption) (*ReadContractAddressResp, error)
	SendTransactionWithData(ctx context.Context, in *SendTransactionWithDataReq, opts ...grpc.CallOption) (*SendTransactionWithDataResp, error)
}

type blockchainClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainClient(cc grpc.ClientConnInterface) BlockchainClient {
	return &blockchainClient{cc}
}

func (c *blockchainClient) GetBlockNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockNumberResp, error) {
	out := new(BlockNumberResp)
	err := c.cc.Invoke(ctx, "/Blockchain/GetBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetBlockByHash(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error) {
	out := new(GetBlockResp)
	err := c.cc.Invoke(ctx, "/Blockchain/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetBlockByNumber(ctx context.Context, in *GetBlockReq, opts ...grpc.CallOption) (*GetBlockResp, error) {
	out := new(GetBlockResp)
	err := c.cc.Invoke(ctx, "/Blockchain/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetTransactionByHash(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error) {
	out := new(GetTransactionResp)
	err := c.cc.Invoke(ctx, "/Blockchain/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error) {
	out := new(GetTransactionResp)
	err := c.cc.Invoke(ctx, "/Blockchain/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) GetTransactionByBlockNumberAndIndex(ctx context.Context, in *GetTransactionReq, opts ...grpc.CallOption) (*GetTransactionResp, error) {
	out := new(GetTransactionResp)
	err := c.cc.Invoke(ctx, "/Blockchain/GetTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) ReadContractAddress(ctx context.Context, in *ReadContractAddressReq, opts ...grpc.CallOption) (*ReadContractAddressResp, error) {
	out := new(ReadContractAddressResp)
	err := c.cc.Invoke(ctx, "/Blockchain/ReadContractAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainClient) SendTransactionWithData(ctx context.Context, in *SendTransactionWithDataReq, opts ...grpc.CallOption) (*SendTransactionWithDataResp, error) {
	out := new(SendTransactionWithDataResp)
	err := c.cc.Invoke(ctx, "/Blockchain/SendTransactionWithData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServer is the server API for Blockchain service.
// All implementations must embed UnimplementedBlockchainServer
// for forward compatibility
type BlockchainServer interface {
	GetBlockNumber(context.Context, *emptypb.Empty) (*BlockNumberResp, error)
	GetBlockByHash(context.Context, *GetBlockReq) (*GetBlockResp, error)
	GetBlockByNumber(context.Context, *GetBlockReq) (*GetBlockResp, error)
	GetTransactionByHash(context.Context, *GetTransactionReq) (*GetTransactionResp, error)
	GetTransactionByBlockHashAndIndex(context.Context, *GetTransactionReq) (*GetTransactionResp, error)
	GetTransactionByBlockNumberAndIndex(context.Context, *GetTransactionReq) (*GetTransactionResp, error)
	ReadContractAddress(context.Context, *ReadContractAddressReq) (*ReadContractAddressResp, error)
	SendTransactionWithData(context.Context, *SendTransactionWithDataReq) (*SendTransactionWithDataResp, error)
	mustEmbedUnimplementedBlockchainServer()
}

// UnimplementedBlockchainServer must be embedded to have forward compatible implementations.
type UnimplementedBlockchainServer struct {
}

func (UnimplementedBlockchainServer) GetBlockNumber(context.Context, *emptypb.Empty) (*BlockNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (UnimplementedBlockchainServer) GetBlockByHash(context.Context, *GetBlockReq) (*GetBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedBlockchainServer) GetBlockByNumber(context.Context, *GetBlockReq) (*GetBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedBlockchainServer) GetTransactionByHash(context.Context, *GetTransactionReq) (*GetTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedBlockchainServer) GetTransactionByBlockHashAndIndex(context.Context, *GetTransactionReq) (*GetTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByBlockHashAndIndex not implemented")
}
func (UnimplementedBlockchainServer) GetTransactionByBlockNumberAndIndex(context.Context, *GetTransactionReq) (*GetTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByBlockNumberAndIndex not implemented")
}
func (UnimplementedBlockchainServer) ReadContractAddress(context.Context, *ReadContractAddressReq) (*ReadContractAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContractAddress not implemented")
}
func (UnimplementedBlockchainServer) SendTransactionWithData(context.Context, *SendTransactionWithDataReq) (*SendTransactionWithDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionWithData not implemented")
}
func (UnimplementedBlockchainServer) mustEmbedUnimplementedBlockchainServer() {}

// UnsafeBlockchainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServer will
// result in compilation errors.
type UnsafeBlockchainServer interface {
	mustEmbedUnimplementedBlockchainServer()
}

func RegisterBlockchainServer(s grpc.ServiceRegistrar, srv BlockchainServer) {
	s.RegisterService(&Blockchain_ServiceDesc, srv)
}

func _Blockchain_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/GetBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetBlockNumber(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetBlockByHash(ctx, req.(*GetBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetBlockByNumber(ctx, req.(*GetBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetTransactionByHash(ctx, req.(*GetTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetTransactionByBlockHashAndIndex(ctx, req.(*GetTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_GetTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).GetTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/GetTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).GetTransactionByBlockNumberAndIndex(ctx, req.(*GetTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_ReadContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContractAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).ReadContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/ReadContractAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).ReadContractAddress(ctx, req.(*ReadContractAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockchain_SendTransactionWithData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionWithDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServer).SendTransactionWithData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blockchain/SendTransactionWithData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServer).SendTransactionWithData(ctx, req.(*SendTransactionWithDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Blockchain_ServiceDesc is the grpc.ServiceDesc for Blockchain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blockchain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blockchain",
	HandlerType: (*BlockchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockNumber",
			Handler:    _Blockchain_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _Blockchain_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _Blockchain_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Blockchain_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _Blockchain_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockNumberAndIndex",
			Handler:    _Blockchain_GetTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "ReadContractAddress",
			Handler:    _Blockchain_ReadContractAddress_Handler,
		},
		{
			MethodName: "SendTransactionWithData",
			Handler:    _Blockchain_SendTransactionWithData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockchain.proto",
}
